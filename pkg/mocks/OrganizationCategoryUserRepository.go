// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	models "server/internal/core/models"

	mock "github.com/stretchr/testify/mock"

	repositories "server/internal/core/repositories"
)

// OrganizationCategoryUserRepository is an autogenerated mock type for the OrganizationCategoryUserRepository type
type OrganizationCategoryUserRepository struct {
	mock.Mock
}

// BeginLog provides a mock function with no fields
func (_m *OrganizationCategoryUserRepository) BeginLog() (repositories.OrganizationCategoryUserRepository, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginLog")
	}

	var r0 repositories.OrganizationCategoryUserRepository
	var r1 error
	if rf, ok := ret.Get(0).(func() (repositories.OrganizationCategoryUserRepository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() repositories.OrganizationCategoryUserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.OrganizationCategoryUserRepository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOrganizationCategoryUserExistsById provides a mock function with given fields: id
func (_m *OrganizationCategoryUserRepository) CheckOrganizationCategoryUserExistsById(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationCategoryUserExistsById")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with no fields
func (_m *OrganizationCategoryUserRepository) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrganizationCategoryUser provides a mock function with given fields: organizationCategoryUser
func (_m *OrganizationCategoryUserRepository) CreateOrganizationCategoryUser(organizationCategoryUser *models.OrganizationCategoryUser) (*models.OrganizationCategoryUser, error) {
	ret := _m.Called(organizationCategoryUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationCategoryUser")
	}

	var r0 *models.OrganizationCategoryUser
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategoryUser) (*models.OrganizationCategoryUser, error)); ok {
		return rf(organizationCategoryUser)
	}
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategoryUser) *models.OrganizationCategoryUser); ok {
		r0 = rf(organizationCategoryUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategoryUser)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.OrganizationCategoryUser) error); ok {
		r1 = rf(organizationCategoryUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with no fields
func (_m *OrganizationCategoryUserRepository) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrganizationCategoryUserRepository creates a new instance of OrganizationCategoryUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationCategoryUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationCategoryUserRepository {
	mock := &OrganizationCategoryUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
