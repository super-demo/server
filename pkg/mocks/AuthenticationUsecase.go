// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	models "server/internal/core/models"

	mock "github.com/stretchr/testify/mock"
)

// AuthenticationUsecase is an autogenerated mock type for the AuthenticationUsecase type
type AuthenticationUsecase struct {
	mock.Mock
}

// CmsSignInWithGoogle provides a mock function with given fields: token
func (_m *AuthenticationUsecase) CmsSignInWithGoogle(token string) (*models.TokenResponse, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for CmsSignInWithGoogle")
	}

	var r0 *models.TokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TokenResponse, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TokenResponse); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationSignInWithGoogle provides a mock function with given fields: token
func (_m *AuthenticationUsecase) OrganizationSignInWithGoogle(token string) (*models.TokenResponse, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationSignInWithGoogle")
	}

	var r0 *models.TokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TokenResponse, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TokenResponse); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: refreshToken
func (_m *AuthenticationUsecase) RefreshToken(refreshToken string) (*models.AccessTokenResponse, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *models.AccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccessTokenResponse, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccessTokenResponse); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticationUsecase creates a new instance of AuthenticationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationUsecase {
	mock := &AuthenticationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
