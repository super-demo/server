// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	models "server/internal/core/models"

	mock "github.com/stretchr/testify/mock"

	repositories "server/internal/core/repositories"
)

// OrganizationServiceRepository is an autogenerated mock type for the OrganizationServiceRepository type
type OrganizationServiceRepository struct {
	mock.Mock
}

// BeginLog provides a mock function with no fields
func (_m *OrganizationServiceRepository) BeginLog() (repositories.OrganizationServiceRepository, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginLog")
	}

	var r0 repositories.OrganizationServiceRepository
	var r1 error
	if rf, ok := ret.Get(0).(func() (repositories.OrganizationServiceRepository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() repositories.OrganizationServiceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.OrganizationServiceRepository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOrganizationServiceExistsByName provides a mock function with given fields: name
func (_m *OrganizationServiceRepository) CheckOrganizationServiceExistsByName(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationServiceExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with no fields
func (_m *OrganizationServiceRepository) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrganizationService provides a mock function with given fields: organizationService
func (_m *OrganizationServiceRepository) CreateOrganizationService(organizationService *models.OrganizationService) (*models.OrganizationService, error) {
	ret := _m.Called(organizationService)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationService")
	}

	var r0 *models.OrganizationService
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationService) (*models.OrganizationService, error)); ok {
		return rf(organizationService)
	}
	if rf, ok := ret.Get(0).(func(*models.OrganizationService) *models.OrganizationService); ok {
		r0 = rf(organizationService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationService)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.OrganizationService) error); ok {
		r1 = rf(organizationService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with no fields
func (_m *OrganizationServiceRepository) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrganizationServiceRepository creates a new instance of OrganizationServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationServiceRepository {
	mock := &OrganizationServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
