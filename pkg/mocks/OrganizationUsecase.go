// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "server/internal/core/models"

	mock "github.com/stretchr/testify/mock"
)

// OrganizationUsecase is an autogenerated mock type for the OrganizationUsecase type
type OrganizationUsecase struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: organization, requesterUserId
func (_m *OrganizationUsecase) CreateOrganization(organization *models.Organization, requesterUserId int) (*models.Organization, error) {
	ret := _m.Called(organization, requesterUserId)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Organization, int) (*models.Organization, error)); ok {
		return rf(organization, requesterUserId)
	}
	if rf, ok := ret.Get(0).(func(*models.Organization, int) *models.Organization); ok {
		r0 = rf(organization, requesterUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Organization, int) error); ok {
		r1 = rf(organization, requesterUserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationListByUserId provides a mock function with given fields: id, requesterUserId
func (_m *OrganizationUsecase) GetOrganizationListByUserId(id int, requesterUserId int) (*[]models.Organization, error) {
	ret := _m.Called(id, requesterUserId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationListByUserId")
	}

	var r0 *[]models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*[]models.Organization, error)); ok {
		return rf(id, requesterUserId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *[]models.Organization); ok {
		r0 = rf(id, requesterUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, requesterUserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationUsecase creates a new instance of OrganizationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationUsecase {
	mock := &OrganizationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
