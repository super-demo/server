// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	models "server/internal/core/models"

	mock "github.com/stretchr/testify/mock"

	repositories "server/internal/core/repositories"
)

// OrganizationCategoryRepository is an autogenerated mock type for the OrganizationCategoryRepository type
type OrganizationCategoryRepository struct {
	mock.Mock
}

// BeginLog provides a mock function with no fields
func (_m *OrganizationCategoryRepository) BeginLog() (repositories.OrganizationCategoryRepository, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginLog")
	}

	var r0 repositories.OrganizationCategoryRepository
	var r1 error
	if rf, ok := ret.Get(0).(func() (repositories.OrganizationCategoryRepository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() repositories.OrganizationCategoryRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.OrganizationCategoryRepository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOrganizationCategoryExists provides a mock function with given fields: id, categoryId
func (_m *OrganizationCategoryRepository) CheckOrganizationCategoryExists(id int, categoryId int) (bool, error) {
	ret := _m.Called(id, categoryId)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationCategoryExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(id, categoryId)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(id, categoryId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOrganizationCategoryExistsByName provides a mock function with given fields: name
func (_m *OrganizationCategoryRepository) CheckOrganizationCategoryExistsByName(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationCategoryExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with no fields
func (_m *OrganizationCategoryRepository) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrganizationCategory provides a mock function with given fields: organizationCategory
func (_m *OrganizationCategoryRepository) CreateOrganizationCategory(organizationCategory *models.OrganizationCategory) (*models.OrganizationCategory, error) {
	ret := _m.Called(organizationCategory)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationCategory")
	}

	var r0 *models.OrganizationCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategory) (*models.OrganizationCategory, error)); ok {
		return rf(organizationCategory)
	}
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategory) *models.OrganizationCategory); ok {
		r0 = rf(organizationCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.OrganizationCategory) error); ok {
		r1 = rf(organizationCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationCategory provides a mock function with given fields: organizationCategory
func (_m *OrganizationCategoryRepository) DeleteOrganizationCategory(organizationCategory *models.OrganizationCategory) error {
	ret := _m.Called(organizationCategory)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategory) error); ok {
		r0 = rf(organizationCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrganizationCategoryById provides a mock function with given fields: id
func (_m *OrganizationCategoryRepository) GetOrganizationCategoryById(id int) (*models.OrganizationCategory, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationCategoryById")
	}

	var r0 *models.OrganizationCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.OrganizationCategory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.OrganizationCategory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with no fields
func (_m *OrganizationCategoryRepository) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganizationCategory provides a mock function with given fields: organizationCategory
func (_m *OrganizationCategoryRepository) UpdateOrganizationCategory(organizationCategory *models.OrganizationCategory) (*models.OrganizationCategory, error) {
	ret := _m.Called(organizationCategory)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationCategory")
	}

	var r0 *models.OrganizationCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategory) (*models.OrganizationCategory, error)); ok {
		return rf(organizationCategory)
	}
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategory) *models.OrganizationCategory); ok {
		r0 = rf(organizationCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.OrganizationCategory) error); ok {
		r1 = rf(organizationCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationCategoryRepository creates a new instance of OrganizationCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationCategoryRepository {
	mock := &OrganizationCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
