// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	models "server/internal/core/models"

	mock "github.com/stretchr/testify/mock"

	repositories "server/internal/core/repositories"
)

// OrganizationCategoryServiceRepository is an autogenerated mock type for the OrganizationCategoryServiceRepository type
type OrganizationCategoryServiceRepository struct {
	mock.Mock
}

// BeginLog provides a mock function with no fields
func (_m *OrganizationCategoryServiceRepository) BeginLog() (repositories.OrganizationCategoryServiceRepository, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginLog")
	}

	var r0 repositories.OrganizationCategoryServiceRepository
	var r1 error
	if rf, ok := ret.Get(0).(func() (repositories.OrganizationCategoryServiceRepository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() repositories.OrganizationCategoryServiceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.OrganizationCategoryServiceRepository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOrganizationCategoryServiceExistsById provides a mock function with given fields: id
func (_m *OrganizationCategoryServiceRepository) CheckOrganizationCategoryServiceExistsById(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationCategoryServiceExistsById")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with no fields
func (_m *OrganizationCategoryServiceRepository) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrganizationCategoryService provides a mock function with given fields: organizationCategoryService
func (_m *OrganizationCategoryServiceRepository) CreateOrganizationCategoryService(organizationCategoryService *models.OrganizationCategoryService) (*models.OrganizationCategoryService, error) {
	ret := _m.Called(organizationCategoryService)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationCategoryService")
	}

	var r0 *models.OrganizationCategoryService
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategoryService) (*models.OrganizationCategoryService, error)); ok {
		return rf(organizationCategoryService)
	}
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategoryService) *models.OrganizationCategoryService); ok {
		r0 = rf(organizationCategoryService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategoryService)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.OrganizationCategoryService) error); ok {
		r1 = rf(organizationCategoryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationCategoryService provides a mock function with given fields: organizationCategoryService
func (_m *OrganizationCategoryServiceRepository) DeleteOrganizationCategoryService(organizationCategoryService *models.OrganizationCategoryService) error {
	ret := _m.Called(organizationCategoryService)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationCategoryService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.OrganizationCategoryService) error); ok {
		r0 = rf(organizationCategoryService)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrganizationCategoryServiceByOrganizationCategoryId provides a mock function with given fields: id
func (_m *OrganizationCategoryServiceRepository) GetOrganizationCategoryServiceByOrganizationCategoryId(id int) (*models.OrganizationCategoryService, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationCategoryServiceByOrganizationCategoryId")
	}

	var r0 *models.OrganizationCategoryService
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.OrganizationCategoryService, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.OrganizationCategoryService); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategoryService)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationCategoryServiceByOrganizationServiceId provides a mock function with given fields: id
func (_m *OrganizationCategoryServiceRepository) GetOrganizationCategoryServiceByOrganizationServiceId(id int) (*models.OrganizationCategoryService, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationCategoryServiceByOrganizationServiceId")
	}

	var r0 *models.OrganizationCategoryService
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.OrganizationCategoryService, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.OrganizationCategoryService); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationCategoryService)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with no fields
func (_m *OrganizationCategoryServiceRepository) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrganizationCategoryServiceRepository creates a new instance of OrganizationCategoryServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationCategoryServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationCategoryServiceRepository {
	mock := &OrganizationCategoryServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
